const aiService = require('../utils/aiService.js');
const { FallbackStrategy } = require('../utils/fallbackStrategies.js');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

const analysisController = {
  /**
   * Obtiene an√°lisis de IA para todos los proyectos
   */
  getAnalysis: async (req, res) => {
    try {
      console.log('üìä Solicitando an√°lisis de IA...');
      
      // Obtener proyectos de la base de datos
      const projects = await prisma.project.findMany({
        orderBy: { createdAt: 'desc' }
      });

      if (!projects || projects.length === 0) {
        return res.json(FallbackStrategy.generateBasicAnalysis([]));
      }

      // Generar an√°lisis con IA
      const analysis = await aiService.generateProjectSummary(projects);
      
      console.log('‚úÖ An√°lisis de IA generado exitosamente');
      res.json(analysis);

    } catch (error) {
      console.error('‚ùå Error en getAnalysis:', error);
      
      // Fallback a an√°lisis b√°sico
      try {
        const projects = await prisma.project.findMany();
        const fallbackAnalysis = FallbackStrategy.generateBasicAnalysis(projects);
        
        res.status(200).json({
          ...fallbackAnalysis,
          error: `Servicio de IA temporalmente no disponible: ${error.message}`
        });
      } catch (fallbackError) {
        res.status(500).json({
          error: 'Error cr√≠tico en el servicio de an√°lisis',
          details: fallbackError.message
        });
      }
    }
  },

  /**
   * Regenera an√°lisis forzando nueva llamada a IA
   */
  regenerateAnalysis: async (req, res) => {
    try {
      console.log('üîÑ Regenerando an√°lisis de IA...');
      
      const projects = await prisma.project.findMany({
        orderBy: { createdAt: 'desc' }
      });

      // Forzar nuevo an√°lisis sin considerar cache
      const analysis = await aiService.generateProjectSummary(projects);
      
      console.log('‚úÖ An√°lisis regenerado exitosamente');
      res.json(analysis);

    } catch (error) {
      console.error('‚ùå Error en regenerateAnalysis:', error);
      
      const projects = await prisma.project.findMany();
      const fallbackAnalysis = FallbackStrategy.generateBasicAnalysis(projects);
      
      res.status(200).json({
        ...fallbackAnalysis,
        error: `No se pudo regenerar an√°lisis: ${error.message}`
      });
    }
  },

  /**
   * Limpia cache de an√°lisis
   */
  clearAnalysisCache: async (req, res) => {
    try {
      // En una implementaci√≥n real, aqu√≠ limpiar√≠amos cache de Redis o similar
      console.log('üóëÔ∏è Cache de an√°lisis limpiado');
      
      res.json({ 
        message: 'Cache de an√°lisis limpiado exitosamente',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error clearing analysis cache:', error);
      res.status(500).json({ error: 'Error clearing cache' });
    }
  },

  /**
   * Health check del servicio de IA
   */
  healthCheck: async (req, res) => {
    try {
      // Test simple de la API de DeepSeek
      const testPrompt = 'Responde con "OK" si est√°s funcionando.';
      
      const response = await aiService.executeWithRetry(testPrompt, 1);
      
      res.json({
        status: 'healthy',
        service: 'DeepSeek AI',
        response: response.substring(0, 50) + '...',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.status(503).json({
        status: 'unhealthy',
        service: 'DeepSeek AI',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }
};

module.exports = { analysisController };